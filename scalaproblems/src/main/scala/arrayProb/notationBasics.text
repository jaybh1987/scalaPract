https://dzone.com/articles/learning-big-o-notation-with-on-complexity
https://www.bigocheatsheet.com/


O(1):- represents a function that always takes the same take regardless of input size.
def isFirstNumberEqualToOne(numbers: List[Int]): Boolean = {
    numbers.get(0) == 1;
}

O(n) :- Represents the complexity of a function that increases linearly and in direct
proportion to number of inputs.


This is a good example of how BIG O Notation describe the worst case scenario as
the function could return the true after reading the first element or false after
reading all n elements.

def containsNumber(numbers: List[Int], comparisionNumber: Int): Boolean = {
    var flag = false
    for(i <- numbers.indices){
        if(numbers(i) == comparisionNumber) {
           flag = true
        }
    }
    flag
}

O(n^2): Represents a function whose complexity is directly proportional to the square
of the input size.
Adding more nested iterations through the input will increase the complexity
which could then represent O(n^3) with 3 total iteration and O(n^4) with 4 total iterations.

def containsDuplicates(input: List[String]): Boolean = {
    var flag = false

    for(outer <- input.indices) {
        for(inner <- input.indices) {
            if(outer != inner && input(outer) == input(inner)) {
                flag = true
            }
        }
    }

    flag
}

O(2n): Represents a function whose performance doubles for every element
in the input.
This example is the recursive calculation of fibonacci numbers.
The function falls under O(2n) as the function recursively calls itself twice
for each input number until the number is less than or equal to one.

def fibonacci(number: Int): Int = {
    if(number <= 1) {
        number
    } else {
        fibonacci(number - 1) + fibonacci(number - 2)
    }
}

O(log n) :- Represents a function whose comlexity increases logarithmically as the input size
increases.
This makes O(log n) functions scale very well so that the handling of larger inputs
is much less likely to cause performance problems.

divide and conqure

public boolean containsNumber(List<Integer> numbers, int comparisonNumber) {
  int low = 0;
  int high = numbers.size() - 1;
  while (low <= high) {
    int middle = low + (high - low) / 2;
    if (comparisonNumber < numbers.get(middle)) {
      high = middle - 1;
    } else if (comparisonNumber > numbers.get(middle)) {
      low = middle + 1;
    } else {
      return true;
    }
  }
  return false;
}
















